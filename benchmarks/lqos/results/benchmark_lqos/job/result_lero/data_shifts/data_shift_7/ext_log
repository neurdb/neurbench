(ai4db) root@145efaf89057:/code/AI4QueryOptimizer/baseline/Lero/lero/test_script# python test.py --query_path imdb_queries/q_test_small_set.txt --output_query_latency_file q_test_small_set_imdb_07.test
Read 33 test queries.
executing sql: select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from keyword as k, movie_info as mi, movie_keyword as mk, title as t where k.keyword like '%sequel%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mk.movie_id and mk.movie_id = mi.movie_id and k.id = mk.keyword_id; ------------
save history: ./log/query_latency/fe3aa2888e1cfac785091072f94aaed1/72d93548eabe40c3ed39cbe0c6c1328a
after writting write_latency_file 1740213431.3781545 q3c 651.875
executing sql: select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as movie_title from company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and cn.id = mc.company_id and mc.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and mc.movie_id = mk.movie_id; ------------
save history: ./log/query_latency/d4024b149cc1986079e6fcd8ace94c70/b9bcaf9ccd46c5b124a71c6e4bea130c
after writting write_latency_file 1740213435.9270895 q2d 1216.962
executing sql: select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as male_writer, min(t.title) as violent_movie_title from cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi_idx.movie_id = mk.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id; ------------
save history: ./log/query_latency/4c9a6361b786f532bd16b052bec39ce7/4698baff30bd4ed0f1decbf3a3aba39c
after writting write_latency_file 1740213440.5455272 q25c 621.306
executing sql: select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn1.name) as first_company, min(cn2.name) as second_company, min(mi_idx1.info) as first_rating, min(mi_idx2.info) as second_rating, min(t1.title) as first_movie, min(t2.title) as second_movie from company_name as cn1, company_name as cn2, info_type as it1, info_type as it2, kind_type as kt1, kind_type as kt2, link_type as lt, movie_companies as mc1, movie_companies as mc2, movie_info_idx as mi_idx1, movie_info_idx as mi_idx2, movie_link as ml, title as t1, title as t2 where cn1.country_code = '[nl]' and it1.info = 'rating' and it2.info = 'rating' and kt1.kind in ('tv series') and kt2.kind in ('tv series') and lt.link like '%follow%' and mi_idx2.info < '3.0' and t2.production_year = 2007 and lt.id = ml.link_type_id and t1.id = ml.movie_id and t2.id = ml.linked_movie_id and it1.id = mi_idx1.info_type_id and t1.id = mi_idx1.movie_id and kt1.id = t1.kind_id and cn1.id = mc1.company_id and t1.id = mc1.movie_id and ml.movie_id = mi_idx1.movie_id and ml.movie_id = mc1.movie_id and mi_idx1.movie_id = mc1.movie_id and it2.id = mi_idx2.info_type_id and t2.id = mi_idx2.movie_id and kt2.id = t2.kind_id and cn2.id = mc2.company_id and t2.id = mc2.movie_id and ml.linked_movie_id = mi_idx2.movie_id and ml.linked_movie_id = mc2.movie_id and mi_idx2.movie_id = mc2.movie_id; ------------
save history: ./log/query_latency/09255b59097e73873fbc1b0454cd8fb2/b342a8195b7dc2f6f3902a797eb9ee07
after writting write_latency_file 1740213468.977903 q33b 37.749
executing sql: select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(miidx.info) as rating, min(t.title) as movie from company_name as cn, company_type as ct, info_type as it, info_type as it2, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as miidx, title as t where cn.country_code ='[us]' and ct.kind ='production companies' and it.info ='rating' and it2.info ='release dates' and kt.kind ='movie' and mi.movie_id = t.id and it2.id = mi.info_type_id and kt.id = t.kind_id and mc.movie_id = t.id and cn.id = mc.company_id and ct.id = mc.company_type_id and miidx.movie_id = t.id and it.id = miidx.info_type_id and mi.movie_id = miidx.movie_id and mi.movie_id = mc.movie_id and miidx.movie_id = mc.movie_id; ------------
save history: ./log/query_latency/e9f11c4482bdc836aae8ab24ad118de6/b014867719f8888f769847109adfb906
after writting write_latency_file 1740213474.8473444 q13d 1855.486
executing sql: select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(lt.link) as link_type, min(t1.title) as first_movie, min(t2.title) as second_movie from keyword as k, link_type as lt, movie_keyword as mk, movie_link as ml, title as t1, title as t2 where k.keyword ='character-name-in-title' and mk.keyword_id = k.id and t1.id = mk.movie_id and ml.movie_id = t1.id and ml.linked_movie_id = t2.id and lt.id = ml.link_type_id and mk.movie_id = t1.id; ------------
save history: ./log/query_latency/dced393c9744362049c68b79cee74e53/11214ea77bb620e96b394f12ca01e3e3
after writting write_latency_file 1740213479.7960212 q32b 1482.341
executing sql: select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as voiced_char_name, min(n.name) as voicing_actress_name, min(t.title) as kung_fu_panda from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and cn.name = 'dreamworks animation' and it.info = 'release dates' and k.keyword in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') and mi.info is not null and (mi.info like 'japan:%201%' or mi.info like 'usa:%201%') and n.gender ='f' and n.name like '%an%' and rt.role ='actress' and t.production_year > 2010 and t.title like 'kung fu panda%' and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mc.movie_id = mk.movie_id and mi.movie_id = ci.movie_id and mi.movie_id = mk.movie_id and ci.movie_id = mk.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id and k.id = mk.keyword_id; ------------
save history: ./log/query_latency/580b1b96070d7d6ae79793acb4466220/97484f5af2ea55d9b50d3ab979839107
after writting write_latency_file 1740213490.2050402 q24b 1216.909
executing sql: select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as mainstream_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, title as t where cn.country_code = '[us]' and ct.kind = 'production companies' and it1.info = 'genres' and it2.info = 'rating' and mi.info in ('drama', 'horror', 'western', 'family') and mi_idx.info > '7.0' and t.production_year between 2000 and 2010 and t.id = mi.movie_id and t.id = mi_idx.movie_id and mi.info_type_id = it1.id and mi_idx.info_type_id = it2.id and t.id = mc.movie_id and ct.id = mc.company_type_id and cn.id = mc.company_id and mc.movie_id = mi.movie_id and mc.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id; ------------
save history: ./log/query_latency/5513caecfa2612520656d1e4d7685dc7/15fa22520e957f1d6c3ab63407911218
after writting write_latency_file 1740213494.4680948 q12c 506.575
executing sql: select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as complete_euro_dark_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cct1.kind = 'cast' and cct2.kind = 'complete' and cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mc.note not like '%(usa)%' and mc.note like '%(200%)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = mi_idx.movie_id and mc.movie_id = cc.movie_id and mi_idx.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
save history: ./log/query_latency/64a9601549ec341c34046e659e0838f4/b41e459b606f336b085b5cc9779b77bb
after writting write_latency_file 1740213520.2441301 q28c 1658.355
executing sql: select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(kt.kind) as movie_kind, min(t.title) as complete_us_internet_movie from complete_cast as cc, comp_cast_type as cct1, company_name as cn, company_type as ct, info_type as it1, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cct1.kind = 'complete+verified' and cn.country_code = '[us]' and it1.info = 'release dates' and kt.kind in ('movie', 'tv movie', 'video movie', 'video game') and mi.note like '%internet%' and mi.info is not null and (mi.info like 'usa:% 199%' or mi.info like 'usa:% 200%') and t.production_year > 1990 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and t.id = cc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = cc.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id and cct1.id = cc.status_id; ------------
save history: ./log/query_latency/fb992704a79331ad3cf3cf55ae085989/5cdc3e463e5a61d698f3cf3c1c8d819b
after writting write_latency_file 1740213527.3410475 q23c 1481.067
executing sql: select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an1.name) as costume_designer_pseudo, min(t.title) as movie_with_costumes from aka_name as an1, cast_info as ci, company_name as cn, movie_companies as mc, name as n1, role_type as rt, title as t where cn.country_code ='[us]' and rt.role ='costume designer' and an1.person_id = n1.id and n1.id = ci.person_id and ci.movie_id = t.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and an1.person_id = ci.person_id and ci.movie_id = mc.movie_id; ------------
save history: ./log/query_latency/cc04f0642304375512723cc5dd164760/c62d48ecc1ac029a31755c17161a053d
after writting write_latency_file 1740213538.2080555 q8d 7285.115
executing sql: select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(t.title) as american_movie from company_type as ct, info_type as it, movie_companies as mc, movie_info as mi, title as t where ct.kind = 'production companies' and mc.note not like '%(tv)%' and mc.note like '%(usa)%' and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'usa', 'american') and t.production_year > 1990 and t.id = mi.movie_id and t.id = mc.movie_id and mc.movie_id = mi.movie_id and ct.id = mc.company_type_id and it.id = mi.info_type_id; ------------
save history: ./log/query_latency/f5482cfaf046d9d57874d1912a4f5e45/c9e4239d47f9bbe68706c0bd404c4a1c
after writting write_latency_file 1740213541.7878642 q5c 196.533
executing sql: select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as movie_company, min(mi_idx.info) as rating, min(t.title) as western_violent_movie from company_name as cn, company_type as ct, info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where cn.country_code != '[us]' and it1.info = 'countries' and it2.info = 'rating' and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mk.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mc.movie_id and mc.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and ct.id = mc.company_type_id and cn.id = mc.company_id; ------------
save history: ./log/query_latency/05afdd3c6124792c1ca32b2e2face197/185a6db0d3a8a77307465685a13ebb4e
after writting write_latency_file 1740213549.1402721 q22d 1221.38
executing sql: select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as north_european_dark_production from info_type as it1, info_type as it2, keyword as k, kind_type as kt, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it1.info = 'countries' and it2.info = 'rating' and k.keyword is not null and k.keyword in ('murder', 'murder-in-title', 'blood', 'violence') and kt.kind in ('movie', 'episode') and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'danish', 'norwegian', 'german', 'usa', 'american') and mi_idx.info < '8.5' and t.production_year > 2005 and kt.id = t.kind_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mi_idx.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
save history: ./log/query_latency/b83f197fdfc93130d46501f1fc96da53/6a1e82cbb52058635e03376f810b2f80
after writting write_latency_file 1740213553.5616493 q14c 627.701
executing sql: select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as voicing_actress, min(t.title) as jap_engl_voiced_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, info_type as it, movie_companies as mc, movie_info as mi, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and it.info = 'release dates' and n.gender ='f' and rt.role ='actress' and t.production_year > 2000 and t.id = mi.movie_id and t.id = mc.movie_id and t.id = ci.movie_id and mc.movie_id = ci.movie_id and mc.movie_id = mi.movie_id and mi.movie_id = ci.movie_id and cn.id = mc.company_id and it.id = mi.info_type_id and n.id = ci.person_id and rt.id = ci.role_id and n.id = an.person_id and ci.person_id = an.person_id and chn.id = ci.person_role_id; ------------
save history: ./log/query_latency/0f9bc21a203b9158a1d6f03de355cf59/cb2dc9ec68ea5633e46fe9d180b32446
after writting write_latency_file 1740213563.551968 q19d 5145.658
executing sql: select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------


------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi_idx.info) as rating, min(t.title) as movie_title from info_type as it, keyword as k, movie_info_idx as mi_idx, movie_keyword as mk, title as t where it.info ='rating' and k.keyword like '%sequel%' and mi_idx.info > '2.0' and t.production_year > 1990 and t.id = mi_idx.movie_id and t.id = mk.movie_id and mk.movie_id = mi_idx.movie_id and k.id = mk.keyword_id and it.id = mi_idx.info_type_id; ------------
save history: ./log/query_latency/15e5539a750808a98c5f0c6d9c23370c/b43358f7dec7a3c56424ec56a1112f5c
after writting write_latency_file 1740213567.5658627 q4c 633.731
executing sql: select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as alternative_name, min(chn.name) as voiced_char_name, min(n.name) as voicing_actress, min(t.title) as american_movie from aka_name as an, char_name as chn, cast_info as ci, company_name as cn, movie_companies as mc, name as n, role_type as rt, title as t where ci.note in ('(voice)', '(voice: japanese version)', '(voice) (uncredited)', '(voice: english version)') and cn.country_code ='[us]' and n.gender ='f' and rt.role ='actress' and ci.movie_id = t.id and t.id = mc.movie_id and ci.movie_id = mc.movie_id and mc.company_id = cn.id and ci.role_id = rt.id and n.id = ci.person_id and chn.id = ci.person_role_id and an.person_id = n.id and an.person_id = ci.person_id; ------------
save history: ./log/query_latency/e3db8c32ccd02ce4f73f3e0c4eda920c/0fda2df6fd56222699ce30e45d262dd6
after writting write_latency_file 1740213583.228789 q9d 11881.315
executing sql: select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(at.title) as aka_title, min(t.title) as internet_movie_title from aka_title as at, company_name as cn, company_type as ct, info_type as it1, keyword as k, movie_companies as mc, movie_info as mi, movie_keyword as mk, title as t where cn.country_code = '[us]' and it1.info = 'release dates' and mi.note like '%internet%' and t.production_year > 1990 and t.id = at.movie_id and t.id = mi.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and mk.movie_id = mi.movie_id and mk.movie_id = mc.movie_id and mk.movie_id = at.movie_id and mi.movie_id = mc.movie_id and mi.movie_id = at.movie_id and mc.movie_id = at.movie_id and k.id = mk.keyword_id and it1.id = mi.info_type_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
save history: ./log/query_latency/8c68dcca903d64b48ded0b08aca38e76/d47c9d8a96f77ca4acecd5ef860ea2c3
after writting write_latency_file 1740213589.4195266 q15d 1941.166
executing sql: select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(t.title) as movie_title from cast_info as ci, info_type as it1, info_type as it2, movie_info as mi, movie_info_idx as mi_idx, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and mi.movie_id = mi_idx.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id; ------------
save history: ./log/query_latency/90d787b43cf0924cf72e7bfa2dd57f69/92636349dc2de83858404006b1f3905b
after writting write_latency_file 1740213607.5043879 q18c 14543.317
executing sql: select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------

------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(an.name) as cool_actor_pseudonym, min(t.title) as series_named_after_char from aka_name as an, cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where cn.country_code ='[us]' and k.keyword ='character-name-in-title' and t.episode_nr >= 5 and t.episode_nr < 100 and an.person_id = n.id and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and an.person_id = ci.person_id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
save history: ./log/query_latency/45d188c3abcc7515022b746b4c24ada5/0dda857778a0014e85b643b4e3f614ef
after writting write_latency_file 1740213612.2314334 q16d 591.574
executing sql: select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------



------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as marvel_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword = 'marvel-cinematic-universe' and n.name like '%downey%robert%' and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------

save history: ./log/query_latency/84a04d1b8eb44f559a22e7c792628c0f/09efcf8625924dd3efe0cebab1094824
after writting write_latency_file 1740213616.2415843 q6e 615.412
executing sql: select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------

------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as company_name, min(lt.link) as link_type, min(t.title) as western_follow_up from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id; ------------
save history: ./log/query_latency/8e1bd96d9f2303adda2aaa9af1425f90/c23b50f7950d812dc2b259bb2a3da83f
after writting write_latency_file 1740213620.6418295 q21c 220.361
executing sql: select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(k.keyword) as movie_keyword, min(n.name) as actor_name, min(t.title) as hero_movie from cast_info as ci, keyword as k, movie_keyword as mk, name as n, title as t where k.keyword in ('superhero', 'sequel', 'second-part', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence') and t.production_year > 2000 and k.id = mk.keyword_id and t.id = mk.movie_id and t.id = ci.movie_id and ci.movie_id = mk.movie_id and n.id = ci.person_id; ------------
save history: ./log/query_latency/d423e11872eacb312f6cc36ad2685fcd/394cc9f7c298ab98697dfbfde995f4e7
after writting write_latency_file 1740213624.7203689 q6f 654.154
executing sql: select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member_name, min(pi.info) as cast_member_info from aka_name as an, cast_info as ci, info_type as it, link_type as lt, movie_link as ml, name as n, person_info as pi, title as t where an.name is not null and (an.name like '%a%' or an.name like 'a%') and it.info ='mini biography' and lt.link in ('references', 'referenced in', 'features', 'featured in') and n.name_pcode_cf between 'a' and 'f' and (n.gender='m' or (n.gender = 'f' and n.name like 'a%')) and pi.note is not null and t.production_year between 1980 and 2010 and n.id = an.person_id and n.id = pi.person_id and ci.person_id = n.id and t.id = ci.movie_id and ml.linked_movie_id = t.id and lt.id = ml.link_type_id and it.id = pi.info_type_id and pi.person_id = an.person_id and pi.person_id = ci.person_id and an.person_id = ci.person_id and ci.movie_id = ml.linked_movie_id; ------------
save history: ./log/query_latency/86e95064cba711c2146bf30da7e3bdb6/1590df0dfed3edf469723e923278b9fe
after writting write_latency_file 1740213628.622035 q7c 37.22
executing sql: select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as member_in_charnamed_movie from cast_info as ci, company_name as cn, keyword as k, movie_companies as mc, movie_keyword as mk, name as n, title as t where k.keyword ='character-name-in-title' and n.name like '%b%' and n.id = ci.person_id and ci.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_id = cn.id and ci.movie_id = mc.movie_id and ci.movie_id = mk.movie_id and mc.movie_id = mk.movie_id; ------------
save history: ./log/query_latency/407dd45c7e6f82ed11c4dfa6f0b21c4c/400be27f3e393144a5d75f97c00a5db6
after writting write_latency_file 1740213633.3712785 q17f 1200.291
executing sql: select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(n.name) as cast_member, min(t.title) as complete_dynamic_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, keyword as k, kind_type as kt, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and ci.movie_id = cc.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
save history: ./log/query_latency/e5eb1499ff8d0d057a64e800ea46a86b/55ed16b22e97fddc63be1438e39ec7fa
after writting write_latency_file 1740213638.4604962 q20c 610.104
executing sql: select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------


------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as producing_company, min(lt.link) as link_type, min(t.title) as complete_western_sequel from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_info as mi, movie_keyword as mk, movie_link as ml, title as t where cct1.kind = 'cast' and cct2.kind like 'complete%' and cn.country_code !='[pl]' and (cn.name like '%film%' or cn.name like '%warner%') and ct.kind ='production companies' and k.keyword ='sequel' and lt.link like '%follow%' and mc.note is null and mi.info in ('sweden', 'norway', 'germany', 'denmark', 'swedish', 'denish', 'norwegian', 'german', 'english') and t.production_year between 1950 and 2010 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and mi.movie_id = t.id and t.id = cc.movie_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and ml.movie_id = mi.movie_id and mk.movie_id = mi.movie_id and mc.movie_id = mi.movie_id and ml.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and mc.movie_id = cc.movie_id and mi.movie_id = cc.movie_id; ------------
save history: ./log/query_latency/fe6f0495cde894f1b84a4123bcf76083/1cb26a8e424b926dd8f3ede223f7c3c8
after writting write_latency_file 1740213649.8503547 q27c 1028.215
executing sql: select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as violent_liongate_movie from cast_info as ci, company_name as cn, info_type as it1, info_type as it2, keyword as k, movie_companies as mc, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and cn.name like 'lionsgate%' and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = mc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = mc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = mc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = mc.movie_id and mk.movie_id = mc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cn.id = mc.company_id; ------------
save history: ./log/query_latency/588bd25762374e0c10eb42546739f04d/5fd3bc9f001ad1f5ab81274b785d2881
after writting write_latency_file 1740213657.3731837 q31c 1215.547
executing sql: select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mc.note) as production_note, min(t.title) as movie_title, min(t.production_year) as movie_year from company_type as ct, info_type as it, movie_companies as mc, movie_info_idx as mi_idx, title as t where ct.kind = 'production companies' and it.info = 'bottom 10 rank' and mc.note not like '%(as metro-goldwyn-mayer pictures)%' and t.production_year >2000 and ct.id = mc.company_type_id and t.id = mc.movie_id and t.id = mi_idx.movie_id and mc.movie_id = mi_idx.movie_id and it.id = mi_idx.info_type_id; ------------
save history: ./log/query_latency/30f2a62e1e1b7343f9fbb753567aa144/0f01762340fdf594e1bbc22f5c2f019c
after writting write_latency_file 1740213661.2144775 q1d 427.451
executing sql: select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(mi.info) as movie_budget, min(mi_idx.info) as movie_votes, min(n.name) as writer, min(t.title) as complete_violent_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, cast_info as ci, info_type as it1, info_type as it2, keyword as k, movie_info as mi, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind ='complete+verified' and ci.note in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') and it1.info = 'genres' and it2.info = 'votes' and k.keyword in ('murder', 'violence', 'blood', 'gore', 'death', 'female-nudity', 'hospital') and mi.info in ('horror', 'action', 'sci-fi', 'thriller', 'crime', 'war') and n.gender = 'm' and t.id = mi.movie_id and t.id = mi_idx.movie_id and t.id = ci.movie_id and t.id = mk.movie_id and t.id = cc.movie_id and ci.movie_id = mi.movie_id and ci.movie_id = mi_idx.movie_id and ci.movie_id = mk.movie_id and ci.movie_id = cc.movie_id and mi.movie_id = mi_idx.movie_id and mi.movie_id = mk.movie_id and mi.movie_id = cc.movie_id and mi_idx.movie_id = mk.movie_id and mi_idx.movie_id = cc.movie_id and mk.movie_id = cc.movie_id and n.id = ci.person_id and it1.id = mi.info_type_id and it2.id = mi_idx.info_type_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id; ------------
save history: ./log/query_latency/22c86934ae9787f1780e78d1c21cc609/f5dd32d6713c705f41d1a50445743926
after writting write_latency_file 1740213671.037696 q30c 605.397
executing sql: select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character_name, min(mi_idx.info) as rating, min(t.title) as complete_hero_movie from complete_cast as cc, comp_cast_type as cct1, comp_cast_type as cct2, char_name as chn, cast_info as ci, info_type as it2, keyword as k, kind_type as kt, movie_info_idx as mi_idx, movie_keyword as mk, name as n, title as t where cct1.kind = 'cast' and cct2.kind like '%complete%' and chn.name is not null and (chn.name like '%man%' or chn.name like '%man%') and it2.info = 'rating' and k.keyword in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') and kt.kind = 'movie' and t.production_year > 2000 and kt.id = t.kind_id and t.id = mk.movie_id and t.id = ci.movie_id and t.id = cc.movie_id and t.id = mi_idx.movie_id and mk.movie_id = ci.movie_id and mk.movie_id = cc.movie_id and mk.movie_id = mi_idx.movie_id and ci.movie_id = cc.movie_id and ci.movie_id = mi_idx.movie_id and cc.movie_id = mi_idx.movie_id and chn.id = ci.person_role_id and n.id = ci.person_id and k.id = mk.keyword_id and cct1.id = cc.subject_id and cct2.id = cc.status_id and it2.id = mi_idx.info_type_id; ------------
save history: ./log/query_latency/892c9766e30b0bcf63a8c519879071c8/a2b398bd556d6f1770b4ac86d9b8b85a
after writting write_latency_file 1740213679.0330489 q26c 609.728
executing sql: select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(cn.name) as from_company, min(mc.note) as production_note, min(t.title) as movie_based_on_book from company_name as cn, company_type as ct, keyword as k, link_type as lt, movie_companies as mc, movie_keyword as mk, movie_link as ml, title as t where cn.country_code !='[pl]' and ct.kind != 'production companies' and ct.kind is not null and k.keyword in ('sequel', 'revenge', 'based-on-novel') and mc.note is not null and t.production_year > 1950 and lt.id = ml.link_type_id and ml.movie_id = t.id and t.id = mk.movie_id and mk.keyword_id = k.id and t.id = mc.movie_id and mc.company_type_id = ct.id and mc.company_id = cn.id and ml.movie_id = mk.movie_id and ml.movie_id = mc.movie_id and mk.movie_id = mc.movie_id; ------------
save history: ./log/query_latency/2716323c76abfe71ca03895f6f668ad5/4724bd886c09fb27629d3abd40e512de
after writting write_latency_file 1740213684.0025938 q11d 1182.009
executing sql: select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id;
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done Explaining the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done fetchall the query EXPLAIN (COSTS FALSE, FORMAT JSON, SUMMARY) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
connecting to db with  dbname=imdb_07v2 user=postgres password=123 host=localhost port=5432
------------ Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------


------------ Done Explaining the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
------------ Done fetchall the query EXPLAIN (ANALYZE, TIMING, VERBOSE, COSTS, SUMMARY, FORMAT JSON) select min(chn.name) as character, min(t.title) as movie_with_american_producer from char_name as chn, cast_info as ci, company_name as cn, company_type as ct, movie_companies as mc, role_type as rt, title as t where ci.note like '%(producer)%' and cn.country_code = '[us]' and t.production_year > 1990 and t.id = mc.movie_id and t.id = ci.movie_id and ci.movie_id = mc.movie_id and chn.id = ci.person_role_id and rt.id = ci.role_id and cn.id = mc.company_id and ct.id = mc.company_type_id; ------------
save history: ./log/query_latency/78a61b9f723c3e96cdb4ca9cd5a6c009/7c483109a9a1d7484cd5838a13fa053f
after writting write_latency_file 1740213695.1620638 q10c 7541.37
